/**
 * coogpaws-members-fullstack.js
 * ONE FILE to paste into Replit and run.
 *
 * What you get:
 * - Express + Postgres membership system (join, login, profile view/update, delete)
 * - Fields: first/last name, email, handle (username), password, about me, interests,
 *           affiliation (dropdown), avatar (upload URL or 5 defaults), location/major/grad year,
 *           optional physical address, opt-in for offers
 * - Session-based auth (cookie) for /profile
 * - Frontend served inline: Join page, Login page, Profile page with Update + Delete (with warning)
 *
 * How to run on Replit:
 * 1) Create a new file: coogpaws-members-fullstack.js
 * 2) Paste this entire block.
 * 3) Replit Secrets: set DATABASE_URL=postgresql://user:pass@host:port/dbname
 *    (Optional) SESSION_SECRET=some-long-random-string
 * 4) Run: node coogpaws-members-fullstack.js
 * 5) Open the web view — use the top nav (Join / Login / Profile)
 */

import express from "express";
import session from "express-session";
import crypto from "crypto";
import { Pool } from "pg";
import bcrypt from "bcrypt";

const app = express();
const PORT = process.env.PORT || 5000;

// ---------- DB ----------
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Create table if missing
await pool.query(`
CREATE TABLE IF NOT EXISTS members (
  id SERIAL PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  username TEXT UNIQUE NOT NULL,
  about_me TEXT,
  interests TEXT,
  affiliation TEXT CHECK (affiliation IN (
    'Current Student','Ex-Student','Graduate','Faculty','Staff','Coog Crazy Fan'
  )),
  profile_image_url TEXT,
  default_avatar_choice INT,      -- 1..5
  location TEXT,
  graduation_year INT,
  major_or_department TEXT,
  social_links JSONB,

  -- Optional physical address + marketing opt-in
  address_line1 TEXT,
  address_line2 TEXT,
  city TEXT,
  state TEXT,
  zip_code TEXT,
  country TEXT DEFAULT 'USA',
  opt_in_offers BOOLEAN DEFAULT false,

  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP,
  status TEXT DEFAULT 'active'
);
`);

// ---------- Sessions ----------
app.use(
  session({
    name: "coogpaws.sid",
    secret:
      process.env.SESSION_SECRET ||
      crypto.randomBytes(32).toString("hex"),
    resave: false,
    saveUninitialized: false,
    cookie: {
      httpOnly: true,
      sameSite: "lax",
      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days
    },
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ---------- Helpers ----------
function requireAuth(req, res, next) {
  if (!req.session.userId) {
    return res.status(401).json({ error: "Not logged in" });
  }
  next();
}

const AFFILIATIONS = [
  "Current Student",
  "Ex-Student",
  "Graduate",
  "Faculty",
  "Staff",
  "Coog Crazy Fan",
];

function sanitizeString(x, max = 2000) {
  if (typeof x !== "string") return null;
  const trimmed = x.trim();
  return trimmed.slice(0, max);
}

function boolFrom(x) {
  if (typeof x === "boolean") return x;
  if (typeof x === "string") {
    return ["true", "1", "yes", "on"].includes(x.toLowerCase());
  }
  return false;
}

async function getMemberByEmail(email) {
  const q = await pool.query(
    "SELECT * FROM members WHERE email=$1 LIMIT 1",
    [email]
  );
  return q.rows[0] || null;
}

async function getMemberById(id) {
  const q = await pool.query("SELECT * FROM members WHERE id=$1 LIMIT 1", [
    id,
  ]);
  return q.rows[0] || null;
}

async function getMemberByUsername(username) {
  const q = await pool.query(
    "SELECT * FROM members WHERE username=$1 LIMIT 1",
    [username]
  );
  return q.rows[0] || null;
}

// shape profile object to return to client (hide password_hash)
function publicMember(m) {
  if (!m) return null;
  const {
    password_hash,
    ...safe
  } = m;
  return safe;
}

// ---------- API: Auth & Profile ----------

// JOIN (signup)
app.post("/api/signup", async (req, res) => {
  try {
    const {
      first_name,
      last_name,
      email,
      password,
      username,
      about_me,
      interests,
      affiliation,
      profile_image_url,
      default_avatar_choice,
      location,
      graduation_year,
      major_or_department,
      social_links, // JSON string or object
      address_line1,
      address_line2,
      city,
      state,
      zip_code,
      country,
      opt_in_offers,
    } = req.body;

    // Basic validation
    const _email = sanitizeString(email, 320);
    const _password = typeof password === "string" ? password : null;
    const _username = sanitizeString(username, 40);
    if (!_email || !_password || !_username) {
      return res
        .status(400)
        .json({ error: "email, password, username are required" });
    }

    if (await getMemberByEmail(_email)) {
      return res.status(409).json({ error: "Email already in use" });
    }
    if (await getMemberByUsername(_username)) {
      return res.status(409).json({ error: "Username already in use" });
    }

    let _affiliation = sanitizeString(affiliation, 40);
    if (_affiliation && !AFFILIATIONS.includes(_affiliation)) {
      _affiliation = null;
    }

    const passHash = await bcrypt.hash(_password, 12);

    // social links parsing
    let _social = null;
    if (social_links) {
      try {
        _social =
          typeof social_links === "string"
            ? JSON.parse(social_links)
            : social_links;
      } catch {
        _social = null;
      }
    }

    // Insert
    const q = await pool.query(
      `INSERT INTO members
      (first_name, last_name, email, password_hash, username, about_me, interests, affiliation,
       profile_image_url, default_avatar_choice, location, graduation_year, major_or_department,
       social_links, address_line1, address_line2, city, state, zip_code, country, opt_in_offers, last_login)
      VALUES
      ($1,$2,$3,$4,$5,$6,$7,$8,
       $9,$10,$11,$12,$13,
       $14,$15,$16,$17,$18,$19,$20,$21, NOW())
      RETURNING *`,
      [
        sanitizeString(first_name, 80),
        sanitizeString(last_name, 80),
        _email,
        passHash,
        _username,
        sanitizeString(about_me, 4000),
        sanitizeString(interests, 1000),
        _affiliation,
        sanitizeString(profile_image_url, 2000),
        default_avatar_choice ? Number(default_avatar_choice) : null,
        sanitizeString(location, 120),
        graduation_year ? Number(graduation_year) : null,
        sanitizeString(major_or_department, 120),
        _social,
        sanitizeString(address_line1, 200),
        sanitizeString(address_line2, 200),
        sanitizeString(city, 120),
        sanitizeString(state, 120),
        sanitizeString(zip_code, 20),
        sanitizeString(country, 120),
        boolFrom(opt_in_offers),
      ]
    );

    const member = q.rows[0];

    // Log them in
    req.session.userId = member.id;
    res.json({ member: publicMember(member) });
  } catch (e) {
    console.error("SIGNUP error:", e);
    res.status(500).json({ error: "Internal error" });
  }
});

// LOGIN
app.post("/api/login", async (req, res) => {
  try {
    const { email, password } = req.body || {};
    const _email = sanitizeString(email, 320);
    if (!_email || typeof password !== "string") {
      return res.status(400).json({ error: "email and password required" });
    }
    const m = await getMemberByEmail(_email);
    if (!m) return res.status(401).json({ error: "Invalid credentials" });

    const ok = await bcrypt.compare(password, m.password_hash);
    if (!ok) return res.status(401).json({ error: "Invalid credentials" });

    await pool.query("UPDATE members SET last_login=NOW() WHERE id=$1", [m.id]);

    req.session.userId = m.id;
    res.json({ member: publicMember(m) });
  } catch (e) {
    console.error("LOGIN error:", e);
    res.status(500).json({ error: "Internal error" });
  }
});

// LOGOUT
app.post("/api/logout", (req, res) => {
  req.session.destroy(() => {
    res.json({ status: "ok" });
  });
});

// CURRENT USER
app.get("/api/me", async (req, res) => {
  if (!req.session.userId) return res.json({ member: null });
  const m = await getMemberById(req.session.userId);
  res.json({ member: publicMember(m) });
});

// UPDATE PROFILE
app.put("/api/profile", requireAuth, async (req, res) => {
  try {
    const id = req.session.userId;

    const updatable = {
      first_name: sanitizeString(req.body.first_name, 80),
      last_name: sanitizeString(req.body.last_name, 80),
      about_me: sanitizeString(req.body.about_me, 4000),
      interests: sanitizeString(req.body.interests, 1000),
      affiliation: AFFILIATIONS.includes(req.body.affiliation)
        ? req.body.affiliation
        : null,
      profile_image_url: sanitizeString(req.body.profile_image_url, 2000),
      default_avatar_choice: req.body.default_avatar_choice
        ? Number(req.body.default_avatar_choice)
        : null,
      location: sanitizeString(req.body.location, 120),
      graduation_year: req.body.graduation_year
        ? Number(req.body.graduation_year)
        : null,
      major_or_department: sanitizeString(req.body.major_or_department, 120),
      social_links: (() => {
        const s = req.body.social_links;
        if (!s) return null;
        try {
          return typeof s === "string" ? JSON.parse(s) : s;
        } catch {
          return null;
        }
      })(),
      address_line1: sanitizeString(req.body.address_line1, 200),
      address_line2: sanitizeString(req.body.address_line2, 200),
      city: sanitizeString(req.body.city, 120),
      state: sanitizeString(req.body.state, 120),
      zip_code: sanitizeString(req.body.zip_code, 20),
      country: sanitizeString(req.body.country, 120),
      opt_in_offers: boolFrom(req.body.opt_in_offers),
    };

    // Build dynamic SQL update
    const keys = Object.keys(updatable).filter((k) => updatable[k] !== undefined);
    const sets = keys.map((k, i) => `${k}=$${i + 1}`).join(", ");
    const vals = keys.map((k) => updatable[k]);

    const q = await pool.query(
      `UPDATE members SET ${sets} WHERE id=$${keys.length + 1} RETURNING *`,
      [...vals, id]
    );

    res.json({ member: publicMember(q.rows[0]) });
  } catch (e) {
    console.error("UPDATE error:", e);
    res.status(500).json({ error: "Internal error" });
  }
});

// DELETE PROFILE (permanent)
app.delete("/api/profile", requireAuth, async (req, res) => {
  try {
    const id = req.session.userId;
    await pool.query("DELETE FROM members WHERE id=$1", [id]);
    req.session.destroy(() => {
      res.json({
        status: "deleted",
        message:
          "Your membership profile has been permanently deleted. To rejoin, you must sign up again.",
      });
    });
  } catch (e) {
    console.error("DELETE error:", e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- Frontend UI (Join / Login / Profile) ----------
app.get("/", (_req, res) => {
  res.setHeader("Content-Type", "text/html; charset=utf-8");
  res.end(`<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Coogpaws Membership 🐾</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .field { display:grid; gap:.25rem; }
    .card { background:white; border-radius:1rem; padding:1rem; box-shadow:0 6px 30px rgba(0,0,0,.06); }
    .btn { background:#111; color:white; padding:.6rem 1rem; border-radius:.6rem; }
    .btn-red { background:#b91c1c; }
    .btn-ghost { background:white; border:1px solid #ddd; }
    .grid-2 { display:grid; gap:1rem; grid-template-columns: 1fr 1fr; }
    .grid-3 { display:grid; gap:1rem; grid-template-columns: repeat(3,1fr); }
    .avatar { width:44px; height:44px; display:inline-flex; align-items:center; justify-content:center; border-radius:999px; border:2px solid #eee; font-size:22px; cursor:pointer; }
    .avatar.sel { outline:3px solid #111; }
    .warn { background:#fff7ed; border:1px solid #fed7aa; padding:.75rem; border-radius:.5rem; }
  </style>
</head>
<body class="bg-gray-100 text-gray-900">
  <header class="bg-white shadow">
    <div class="mx-auto max-w-5xl p-4 flex items-center justify-between">
      <h1 class="text-2xl font-bold">🐾 Coogpaws Membership</h1>
      <nav class="flex gap-3">
        <a class="hover:underline" href="#" onclick="show('join')">Join</a>
        <a class="hover:underline" href="#" onclick="show('login')">Login</a>
        <a class="hover:underline" href="#" onclick="show('profile')">Profile</a>
        <button id="logoutBtn" class="btn-ghost hidden" onclick="logout()">Logout</button>
      </nav>
    </div>
  </header>

  <main class="mx-auto max-w-5xl p-4 space-y-6">
    <!-- Join -->
    <section id="join" class="card">
      <h2 class="text-xl font-semibold mb-2">Join Coogpaws</h2>
      <form id="joinForm" class="space-y-3">
        <div class="grid-2">
          <label class="field">First name <input name="first_name" class="border rounded p-2"></label>
          <label class="field">Last name <input name="last_name" class="border rounded p-2"></label>
        </div>
        <div class="grid-2">
          <label class="field">Email* <input name="email" type="email" required class="border rounded p-2"></label>
          <label class="field">Handle (username)* <input name="username" required class="border rounded p-2" placeholder="e.g. CoogFan88"></label>
        </div>
        <label class="field">Password* <input name="password" type="password" required class="border rounded p-2"></label>

        <div class="grid-2">
          <label class="field">Affiliation
            <select name="affiliation" class="border rounded p-2">
              <option value="">-- choose --</option>
              <option>Current Student</option>
              <option>Ex-Student</option>
              <option>Graduate</option>
              <option>Faculty</option>
              <option>Staff</option>
              <option>Coog Crazy Fan</option>
            </select>
          </label>
          <label class="field">Interests <input name="interests" class="border rounded p-2" placeholder="Sports, Music, Tech"></label>
        </div>

        <label class="field">About Me
          <textarea name="about_me" class="border rounded p-2" rows="3"></textarea>
        </label>

        <!-- Avatar choice -->
        <div>
          <div class="mb-1 font-medium">Choose a default avatar (optional)</div>
          <div id="avatars" class="flex gap-3">
            <div class="avatar" data-av="1">🐾</div>
            <div class="avatar" data-av="2">🔥</div>
            <div class="avatar" data-av="3">🎓</div>
            <div class="avatar" data-av="4">🏈</div>
            <div class="avatar" data-av="5">🎉</div>
          </div>
          <input type="hidden" name="default_avatar_choice" id="avChoice">
        </div>
        <label class="field">Or paste a custom avatar URL
          <input name="profile_image_url" class="border rounded p-2" placeholder="https://.../avatar.png">
        </label>

        <!-- Optional Address -->
        <details class="mt-2">
          <summary class="cursor-pointer select-none">Add your mailing address (optional) for perks</summary>
          <div class="grid-2 mt-3">
            <label class="field">Address line 1 <input name="address_line1" class="border rounded p-2"></label>
            <label class="field">Address line 2 <input name="address_line2" class="border rounded p-2"></label>
          </div>
          <div class="grid-3">
            <label class="field">City <input name="city" class="border rounded p-2"></label>
            <label class="field">State <input name="state" class="border rounded p-2"></label>
            <label class="field">ZIP <input name="zip_code" class="border rounded p-2"></label>
          </div>
          <label class="field">Country <input name="country" class="border rounded p-2" value="USA"></label>
          <label class="inline-flex items-center gap-2 mt-2">
            <input type="checkbox" name="opt_in_offers">
            <span>I want special offers from affiliates</span>
          </label>
        </details>

        <div class="mt-2">
          <button class="btn">Create Account</button>
        </div>
      </form>
      <div id="joinMsg" class="mt-2 text-sm text-gray-600"></div>
    </section>

    <!-- Login -->
    <section id="login" class="card hidden">
      <h2 class="text-xl font-semibold mb-2">Login</h2>
      <form id="loginForm" class="space-y-3">
        <label class="field">Email <input name="email" type="email" class="border rounded p-2"></label>
        <label class="field">Password <input name="password" type="password" class="border rounded p-2"></label>
        <button class="btn">Login</button>
      </form>
      <div id="loginMsg" class="mt-2 text-sm text-gray-600"></div>
    </section>

    <!-- Profile -->
    <section id="profile" class="card hidden">
      <h2 class="text-xl font-semibold mb-2">Your Profile</h2>
      <div id="profWarn" class="warn hidden">
        <b>Heads up:</b> Deleting your profile is permanent. To rejoin, you must sign up again.
      </div>
      <form id="profileForm" class="space-y-3"></form>
      <div class="flex gap-2">
        <button id="updateBtn" class="btn">Update Profile</button>
        <button id="deleteBtn" class="btn btn-red">Delete Profile</button>
      </div>
      <div id="profileMsg" class="mt-2 text-sm text-gray-600"></div>
    </section>
  </main>

  <script>
    // --- Simple tab switch ---
    function show(id) {
      for (const sec of ["join","login","profile"]) {
        document.getElementById(sec).classList.toggle("hidden", sec !== id);
      }
      if (id === "profile") { loadMe(); }
    }

    // --- Avatar defaults selection ---
    const avEl = document.getElementById("avatars");
    const avChoice = document.getElementById("avChoice");
    if (avEl) {
      avEl.addEventListener("click", (e) => {
        const el = e.target.closest(".avatar");
        if (!el) return;
        for (const a of avEl.children) a.classList.remove("sel");
        el.classList.add("sel");
        avChoice.value = el.dataset.av;
      });
    }

    // --- Join form ---
    const joinForm = document.getElementById("joinForm");
    const joinMsg = document.getElementById("joinMsg");
    joinForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      joinMsg.textContent = "Creating account…";
      const fd = new FormData(joinForm);
      const payload = Object.fromEntries(fd.entries());
      payload.opt_in_offers = fd.get("opt_in_offers") ? true : false;

      const res = await fetch("/api/signup", {
        method: "POST",
        headers: { "Content-Type":"application/json" },
        body: JSON.stringify(payload)
      });
      const data = await res.json();
      if (!res.ok) {
        joinMsg.textContent = data.error || "Signup failed";
        return;
        }
      joinMsg.textContent = "Account created! Redirecting to profile…";
      document.getElementById("logoutBtn").classList.remove("hidden");
      show("profile");
    });

    // --- Login form ---
    const loginForm = document.getElementById("loginForm");
    const loginMsg = document.getElementById("loginMsg");
    loginForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      loginMsg.textContent = "Signing in…";
      const fd = new FormData(loginForm);
      const payload = Object.fromEntries(fd.entries());

      const res = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type":"application/json" },
        body: JSON.stringify(payload)
      });
      const data = await res.json();
      if (!res.ok) {
        loginMsg.textContent = data.error || "Login failed";
        return;
      }
      loginMsg.textContent = "Welcome!";
      document.getElementById("logoutBtn").classList.remove("hidden");
      show("profile");
    });

    async function logout() {
      await fetch("/api/logout", { method:"POST" });
      document.getElementById("logoutBtn").classList.add("hidden");
      document.getElementById("profileForm").innerHTML = "";
      document.getElementById("profileMsg").textContent = "";
      show("login");
    }

    // --- Load / render profile ---
    async function loadMe() {
      const res = await fetch("/api/me");
      const data = await res.json();
      const m = data.member;
      const form = document.getElementById("profileForm");
      const profWarn = document.getElementById("profWarn");
      const logoutBtn = document.getElementById("logoutBtn");

      if (!m) {
        form.innerHTML = "<p>Please login.</p>";
        logoutBtn.classList.add("hidden");
        profWarn.classList.add("hidden");
        return;
      }
      logoutBtn.classList.remove("hidden");
      profWarn.classList.remove("hidden");

      form.innerHTML = `
        <div class="grid-2">
          <label class="field">First name <input name="first_name" class="border rounded p-2" value="${m.first_name??""}"></label>
          <label class="field">Last name <input name="last_name" class="border rounded p-2" value="${m.last_name??""}"></label>
        </div>
        <div class="grid-2">
          <label class="field">Email <input disabled class="border rounded p-2 bg-gray-100" value="${m.email}"></label>
          <label class="field">Handle (username) <input disabled class="border rounded p-2 bg-gray-100" value="${m.username}"></label>
        </div>
        <div class="grid-2">
          <label class="field">Affiliation
            <select name="affiliation" class="border rounded p-2">
              ${["","Current Student","Ex-Student","Graduate","Faculty","Staff","Coog Crazy Fan"].map(opt =>
                \`<option \${(m.affiliation||"")===(opt||"")?"selected":""}>\${opt}</option>\`).join("")}
            </select>
          </label>
          <label class="field">Interests <input name="interests" class="border rounded p-2" value="${m.interests??""}"></label>
        </div>
        <label class="field">About Me
          <textarea name="about_me" class="border rounded p-2" rows="3">${m.about_me??""}</textarea>
        </label>

        <div class="grid-2">
          <label class="field">Avatar URL
            <input name="profile_image_url" class="border rounded p-2" value="${m.profile_image_url??""}">
          </label>
          <label class="field">Default avatar choice (1-5)
            <input name="default_avatar_choice" type="number" min="1" max="5" class="border rounded p-2" value="${m.default_avatar_choice??""}">
          </label>
        </div>

        <div class="grid-3">
          <label class="field">Location <input name="location" class="border rounded p-2" value="${m.location??""}"></label>
          <label class="field">Major/Dept <input name="major_or_department" class="border rounded p-2" value="${m.major_or_department??""}"></label>
          <label class="field">Grad Year <input name="graduation_year" type="number" class="border rounded p-2" value="${m.graduation_year??""}"></label>
        </div>

        <details class="mt-2">
          <summary class="cursor-pointer select-none">Mailing address (optional)</summary>
          <div class="grid-2 mt-3">
            <label class="field">Address line 1 <input name="address_line1" class="border rounded p-2" value="${m.address_line1??""}"></label>
            <label class="field">Address line 2 <input name="address_line2" class="border rounded p-2" value="${m.address_line2??""}"></label>
          </div>
          <div class="grid-3">
            <label class="field">City <input name="city" class="border rounded p-2" value="${m.city??""}"></label>
            <label class="field">State <input name="state" class="border rounded p-2" value="${m.state??""}"></label>
            <label class="field">ZIP <input name="zip_code" class="border rounded p-2" value="${m.zip_code??""}"></label>
          </div>
          <label class="field">Country <input name="country" class="border rounded p-2" value="${m.country??"USA"}"></label>
          <label class="inline-flex items-center gap-2 mt-2">
            <input type="checkbox" name="opt_in_offers" ${m.opt_in_offers?"checked":""}>
            <span>I want special offers from affiliates</span>
          </label>
        </details>
      `;
    }

    // Update profile
    document.getElementById("updateBtn").addEventListener("click", async (e) => {
      e.preventDefault();
      const form = document.getElementById("profileForm");
      const fd = new FormData(form);
      const payload = Object.fromEntries(fd.entries());
      payload.opt_in_offers = fd.get("opt_in_offers") ? true : false;

      const res = await fetch("/api/profile", {
        method: "PUT",
        headers: { "Content-Type":"application/json" },
        body: JSON.stringify(payload)
      });
      const data = await res.json();
      document.getElementById("profileMsg").textContent = res.ok ? "Profile updated ✅" : (data.error || "Update failed");
      if (res.ok) loadMe();
    });

    // Delete profile (confirm)
    document.getElementById("deleteBtn").addEventListener("click", async (e) => {
      e.preventDefault();
      if (!confirm("This will permanently delete your membership and profile. To rejoin, you must sign up again. Continue?")) return;
      const res = await fetch("/api/profile", { method:"DELETE" });
      const data = await res.json();
      document.getElementById("profileMsg").textContent = data.message || "Deleted";
      document.getElementById("logoutBtn").classList.add("hidden");
      show("join");
    });

    // Try to show profile if already logged in
    (async () => {
      const me = await (await fetch("/api/me")).json();
      if (me.member) {
        document.getElementById("logoutBtn").classList.remove("hidden");
        show("profile");
      } else {
        show("join");
      }
    })();
  </script>
</body>
</html>`);
});

// ---------- Start ----------
app.listen(PORT, () => {
  console.log(`🐾 Coogpaws Membership running on http://localhost:${PORT}`);
  console.log("Pages: /  |  APIs: /api/signup, /api/login, /api/logout, /api/me, /api/profile (PUT, DELETE)");
});
