import express from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import sharp from "sharp"; // for resizing
import { db } from "../db"; // your database instance
import { users } from "../db/schema"; // your Drizzle users table
import { eq } from "drizzle-orm";

const router = express.Router();
const uploadDir = path.join(__dirname, "../uploads/avatars");
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDir),
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${Date.now()}-${Math.round(Math.random() * 1e9)}${ext}`);
  },
});

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    if (!["image/jpeg", "image/png"].includes(file.mimetype)) {
      return cb(new Error("Only JPG and PNG allowed"));
    }
    cb(null, true);
  },
  limits: { fileSize: 2 * 1024 * 1024 }, // 2MB
});

router.post("/upload-avatar", upload.single("avatar"), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: "No file uploaded." });

    const userId = req.body.userId;
    if (!userId) return res.status(400).json({ error: "Missing userId." });

    const originalPath = req.file.path;
    const resizedPath = path.join(uploadDir, `resized-${req.file.filename}`);

    // ✅ Resize image to 256x256 px
    await sharp(originalPath)
      .resize(256, 256)
      .toFile(resizedPath);

    // Delete original large file
    fs.unlinkSync(originalPath);

    const avatarUrl = `/uploads/avatars/${path.basename(resizedPath)}`;

    // ✅ Save URL in database
    await db
      .update(users)
      .set({ avatar_url: avatarUrl })
      .where(eq(users.id, userId));

    res.json({
      message: "Avatar uploaded and resized successfully!",
      filePath: avatarUrl,
    });
  } catch (err) {
    console.error("Avatar upload error:", err);
    res.status(500).json({ error: "Error uploading avatar." });
  }
});

export default router;
