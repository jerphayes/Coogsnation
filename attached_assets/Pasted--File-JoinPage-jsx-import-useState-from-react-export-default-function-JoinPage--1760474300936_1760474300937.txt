// File: JoinPage.jsx
import { useState } from "react";

export default function JoinPage() {
  const [form, setForm] = useState({
    name: "",
    email: "",
    password: "",
    avatar: "",
  });
  const [message, setMessage] = useState("");
  const [preview, setPreview] = useState(null);

  // âœ… Handle typing
  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  // âœ… Handle avatar upload (from phone or desktop)
  const handleAvatar = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onloadend = () => {
      setPreview(reader.result);
      setForm({ ...form, avatar: reader.result });
    };
    reader.readAsDataURL(file);
  };

  // âœ… Automatically generate default avatar (first letter)
  const generateDefaultAvatar = (name) => {
    const letter = name?.charAt(0)?.toUpperCase() || "U";
    const canvas = document.createElement("canvas");
    canvas.width = 256;
    canvas.height = 256;
    const ctx = canvas.getContext("2d");
    ctx.fillStyle = "#d32f2f";
    ctx.fillRect(0, 0, 256, 256);
    ctx.fillStyle = "#fff";
    ctx.font = "bold 120px sans-serif";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(letter, 128, 150);
    return canvas.toDataURL("image/png");
  };

  // âœ… Submit form and create account
  const handleSubmit = (e) => {
    e.preventDefault();
    const users = JSON.parse(localStorage.getItem("coogsnationUsers") || "[]");

    const exists = users.find((u) => u.email === form.email);
    if (exists) {
      setMessage("This email is already registered. Try logging in instead.");
      return;
    }

    const finalAvatar = form.avatar || generateDefaultAvatar(form.name);
    const newUser = { ...form, avatar: finalAvatar };

    users.push(newUser);
    localStorage.setItem("coogsnationUsers", JSON.stringify(users));
    localStorage.setItem("currentUser", JSON.stringify(newUser));

    setMessage(`Welcome to CoogsNation, ${form.name}! Redirecting...`);
    setTimeout(() => (window.location.href = "/dashboard"), 1500);
  };

  // âœ… Reset form
  const handleReset = () => {
    if (!window.confirm("Clear all entered fields and start fresh?")) return;
    setForm({ name: "", email: "", password: "", avatar: "" });
    setPreview(null);
    setMessage("Form cleared.");
  };

  // âœ… Exit to landing page (no data saved)
  const handleExit = () => {
    if (!window.confirm("Exit join page without saving?")) return;
    setForm({ name: "", email: "", password: "", avatar: "" });
    setPreview(null);
    localStorage.removeItem("currentUser");
    setTimeout(() => (window.location.href = "/"), 800);
  };

  return (
    <div className="max-w-md mx-auto mt-10 p-6 border rounded-lg bg-white shadow">
      <h2 className="text-2xl font-bold text-center mb-4 text-red-700">
        Join CoogsNation
      </h2>

      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        {/* Avatar Upload */}
        <div className="flex flex-col items-center">
          <label className="font-semibold text-gray-700 mb-2">
            Profile Avatar (Optional)
          </label>
          <input
            type="file"
            accept="image/*"
            onChange={handleAvatar}
            className="text-sm text-gray-600"
          />
          {preview ? (
            <img
              src={preview}
              alt="Avatar Preview"
              className="w-24 h-24 rounded-full object-cover border mt-2"
            />
          ) : (
            <div className="w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center text-gray-500 mt-2">
              No Avatar
            </div>
          )}
        </div>

        {/* Name / Email / Password */}
        <input
          name="name"
          placeholder="Full Name"
          className="border p-2 rounded"
          value={form.name}
          onChange={handleChange}
          required
        />
        <input
          name="email"
          type="email"
          placeholder="Email Address"
          className="border p-2 rounded"
          value={form.email}
          onChange={handleChange}
          required
        />
        <input
          name="password"
          type="password"
          placeholder="Password"
          className="border p-2 rounded"
          value={form.password}
          onChange={handleChange}
          required
        />

        {/* Submit */}
        <button
          type="submit"
          className="bg-red-600 text-white py-2 rounded hover:bg-red-700"
        >
          Create Account
        </button>
      </form>

      {message && (
        <p className="text-center mt-3 text-green-600 transition-all duration-300">
          {message}
        </p>
      )}

      {/* Reset and Exit */}
      <div className="flex justify-center mt-6 gap-4">
        <button
          onClick={handleReset}
          className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600"
        >
          ðŸ”„ Reset
        </button>

        <button
          onClick={handleExit}
          className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700"
        >
          ðŸšª Exit
        </button>
      </div>
    </div>
  );
}
